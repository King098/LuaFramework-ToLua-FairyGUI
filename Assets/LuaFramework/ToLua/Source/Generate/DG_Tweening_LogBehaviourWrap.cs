//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DG_Tweening_LogBehaviourWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(DG.Tweening.LogBehaviour));
		L.RegVar("Default", get_Default, null);
		L.RegVar("Verbose", get_Verbose, null);
		L.RegVar("ErrorsOnly", get_ErrorsOnly, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<DG.Tweening.LogBehaviour>.Check = CheckType;
		StackTraits<DG.Tweening.LogBehaviour>.Push = Push;
	}

	static void Push(IntPtr L, DG.Tweening.LogBehaviour arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(DG.Tweening.LogBehaviour), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Default(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.LogBehaviour.Default);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Verbose(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.LogBehaviour.Verbose);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorsOnly(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.LogBehaviour.ErrorsOnly);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		DG.Tweening.LogBehaviour o = (DG.Tweening.LogBehaviour)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

