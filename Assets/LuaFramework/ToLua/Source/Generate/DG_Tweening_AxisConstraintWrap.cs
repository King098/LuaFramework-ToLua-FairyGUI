//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DG_Tweening_AxisConstraintWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(DG.Tweening.AxisConstraint));
		L.RegVar("None", get_None, null);
		L.RegVar("X", get_X, null);
		L.RegVar("Y", get_Y, null);
		L.RegVar("Z", get_Z, null);
		L.RegVar("W", get_W, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<DG.Tweening.AxisConstraint>.Check = CheckType;
		StackTraits<DG.Tweening.AxisConstraint>.Push = Push;
	}

	static void Push(IntPtr L, DG.Tweening.AxisConstraint arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(DG.Tweening.AxisConstraint), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_None(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.AxisConstraint.None);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_X(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.AxisConstraint.X);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Y(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.AxisConstraint.Y);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Z(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.AxisConstraint.Z);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_W(IntPtr L)
	{
		ToLua.Push(L, DG.Tweening.AxisConstraint.W);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		DG.Tweening.AxisConstraint o = (DG.Tweening.AxisConstraint)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

